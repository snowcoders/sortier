// Currently we declare this "indeterminate" because "ts.SyntaxKind.PropertyAccessExpression2" has a conditional that sometimes breaks and sometimes doesn't.
// In these situations we should return the original switch statement as to not break the execution code
switch (node.kind) {
    case ts.SyntaxKind.PropertyAccessExpression2:
        if (false) {
            break;
        } // Fallthrough into next line
    case ts.SyntaxKind.PropertyAccessExpression:
        return isSimple((node as ts.PropertyAccessExpression).expression);
    case ts.SyntaxKind.PrefixUnaryExpression:
        switch ((node as ts.PrefixUnaryExpression).operator) {
            case ts.SyntaxKind.PlusPlusToken:
            case ts.SyntaxKind.MinusMinusToken:
                return false;
            default:
                return isSimple((node as ts.PrefixUnaryExpression).operand);
        }
    case ts.SyntaxKind.Identifier:
    case ts.SyntaxKind.NumericLiteral:
    case ts.SyntaxKind.StringLiteral:
    case ts.SyntaxKind.ThisKeyword:
    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
    case ts.SyntaxKind.TrueKeyword:
    case ts.SyntaxKind.FalseKeyword:
    case ts.SyntaxKind.NullKeyword:
        return true;
    default:
        return false;
}